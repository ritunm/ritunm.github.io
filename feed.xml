<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://ritunm.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ritunm.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-02T18:56:44+00:00</updated><id>https://ritunm.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Mind is the ‘real’ ‘infinity’</title><link href="https://ritunm.github.io/blog/2025/brain/" rel="alternate" type="text/html" title="Mind is the ‘real’ ‘infinity’"/><published>2025-04-10T00:00:00+00:00</published><updated>2025-04-10T00:00:00+00:00</updated><id>https://ritunm.github.io/blog/2025/brain</id><content type="html" xml:base="https://ritunm.github.io/blog/2025/brain/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>This is the most interesting part of human, according to me - how the human <strong>brain</strong> works. From a cell to graveyard, the journey is very interesting. If we think how we thought when we were 2 years old, we will be lost in thinking; still, we will probably not find the actual representation of that time - how we thought, when asking for something, even when we didn’t learn to speak. Science has made so many things possible, till now. From understanding human brain signals to talking with AI (will talk about this someday), whatever we see beside us these days became possible, which has been contributed by science and a lot of people who were involved with this process since the beginning - from making humans social to dealing with machines today.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/auf_Helgoland-480.webp 480w,/assets/img/auf_Helgoland-800.webp 800w,/assets/img/auf_Helgoland-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/auf_Helgoland%0A%20%20%20%20%20%20%20%20.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A colony of Northern gannet. An example of social behavior. (Wikipedia) </div> <hr/> <h2 id="human-understanding">Human Understanding</h2> <p>If we look further, deeper into the structure of human DNA, we will find something interesting - from the sequencing of patterns to RNA and mRNA. Everything is very interesting. I think, <strong>“the human will never understand each other, not even 1%”</strong>. It’s so complex that, even if you get confirmation that you understood a person for a time period - let’s say 10 seconds - there is a near 100% possibility that it is not true.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Snapshot-of-DNA-in-motion-480.webp 480w,/assets/img/Snapshot-of-DNA-in-motion-800.webp 800w,/assets/img/Snapshot-of-DNA-in-motion-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/Snapshot-of-DNA-in-motion.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> DNA in motion (Photo from: Accelerating the Research in Drug Delivery System; A Challenge of the Earth Simulator to Medical Innovation) </div> <hr/> <h2 id="personal-example">Personal Example</h2> <p>What do we want? What does our heart want? Let’s take an example. I liked technology since the very beginning of my educational life, most probably when I was in grade/class 2. I never liked biology, but I had to study biology from class 9 to 12 (high school). When I was in my first year of undergrad, in mind something happened - what I say in my language is, <strong>“Brain Signal Death”</strong>, which ultimately continued till 3rd semester. And then the process was stopped and my brain towards biology developed a gradient polishing of unknown signals (I will try to explain this in another post), which I can’t actually say is love, but is something similar to getting attracted in a spiritual way (this is something I want to discuss/write someday), but the absence of caring is vital here - neither positive nor negative - something but not 0. It holds a value which is ready to be formed but not now, almost there but hasn’t reached.</p> <hr/> <h2 id="parallel-universes">Parallel Universes</h2> <p>Now, think about an exact same cloned version of Rasel, but the only difference is, he liked Biology. But point to be noted here - neither I nor the Rasel 2 did anything related to Biology; it just sat idle inside - the hate and like both.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Cosmos-animation_Friedmann-closed-480.webp 480w,/assets/img/Cosmos-animation_Friedmann-closed-800.webp 800w,/assets/img/Cosmos-animation_Friedmann-closed-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/Cosmos-animation_Friedmann-closed.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Cosmos animation of a cyclic universe. (Wikipedia) </div> <p>Now, both are in the same situation, in two different universes where time unit is the same. At the same time, same coordinates, but two different universes, and both facing the same situation, looking at a block of code:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>

    <span class="kt">int</span> <span class="n">array</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">};</span>
    <span class="kt">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">array</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">size</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">array</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="mi">0</span><span class="p">[</span><span class="n">array</span><span class="p">]);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\t\t</span><span class="s">"</span><span class="p">,</span><span class="n">i</span><span class="p">[</span><span class="n">array</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%p</span><span class="se">\t\t</span><span class="s">"</span><span class="p">,</span><span class="n">i</span><span class="p">[</span><span class="n">array</span><span class="p">]);</span>
    <span class="p">}</span>                                               
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\t\t</span><span class="s">"</span><span class="p">,</span><span class="mi">0</span><span class="p">[</span><span class="n">array</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">array</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div> <hr/> <h2 id="observation">Observation</h2> <p>Let’s take it more forward, a connection between the two universes is there. Someone right there in between measuring every bit of pulse, neuron signals, brain signals, movement and everything about both of them, and visualizing in real time. If both look at the same time to the code, what will be the differences?</p> <p>Most probably, 2 probabilities:</p> <ol> <li>“Same”, which tends to infinity</li> <li>“Completely different”, which also tends to infinity</li> </ol> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/space_force_GIF-480.webp 480w,/assets/img/space_force_GIF-800.webp 800w,/assets/img/space_force_GIF-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/space_force_GIF.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> gif from: https://giphy.com/gifs/space-force-2WH6sqGKm027uq1Q9G </div> <p>Mathematically, we have to consider a lot of things, but we cannot guarantee whether the two Rasel will feel the same or not - even though they are same since birth, everything same, but only one difference, which was never used, can create a possibility near infinity.</p> <hr/> <h2 id="interpretation">Interpretation</h2> <p>Let:</p> <ul> <li>( B_1, B_2 ): Brain states of Rasel 1 and Rasel 2</li> <li>( I ): Input (the code)</li> <li>( R ): Response</li> </ul> <p>Then:</p> <pre><code class="language-math">R_1 = f(B_1, I)  
R_2 = f(B_2, I)
</code></pre> <p>Where ( B_1 pprox B_2 ), but with a dormant difference ( \delta ), then:</p> <pre><code class="language-math">|R_1 - R_2| 	o \infty \quad 	ext{as } \delta 	o 	ext{influence}
</code></pre> <p>This shows sensitive dependence on initial conditions.</p> <hr/> <h2 id="limits-of-perception-and-visualization">Limits of Perception and Visualization</h2> <p>Let’s take it more forward - if the block of code is divided into characters (including white spaces) and every unique brain signal, if we want to visualize with separate unique colors, it will run out of colors and still cannot fulfill the requirements.</p> <p>Looking at a computer screen, two different persons, at the same time, at the same picture, can create <strong>infinity new pictures</strong> (considering how they are looking, processing, which part they are uniquely removing from the view, etc.) inside their brains.</p> <hr/> <h2 id="capturing-human-thought">Capturing Human Thought</h2> <p>Can even the smartest and fastest, and the largest storage, capture this? Is it mathematically possible?</p> <p>Theoretically, the answer leans towards no.</p> <ul> <li>Subjective experience has infinite permutations</li> <li>Information theory limitations</li> <li>Heisenberg’s uncertainty (as a metaphor)</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Sequential_superposition_of_plane_waves-480.webp 480w,/assets/img/Sequential_superposition_of_plane_waves-800.webp 800w,/assets/img/Sequential_superposition_of_plane_waves-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/Sequential_superposition_of_plane_waves.gif" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> The superposition of several plane waves to form a wave packet. This wave packet becomes increasingly localized with the addition of many waves. The Fourier transform is a mathematical operation that separates a wave packet into its individual plane waves. The waves shown here are real for illustrative purposes only; in quantum mechanics the wave function is generally complex. (Wikipedia) </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/Schrodingers_cat-480.webp 480w,/assets/img/Schrodingers_cat-800.webp 800w,/assets/img/Schrodingers_cat-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/Schrodingers_cat.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Schrödinger's cat: a cat, a flask of poison, and a radioactive source connected to a Geiger counter are placed in a sealed box. As illustrated, the quantum description uses a superposition of an alive cat and one that has died. (Wikipedia) </div> <p>Will continue from here - (2025-04-10)</p> <hr/> <h2 id="conclusion">Conclusion</h2> <p>To come to a conclusion - why our mind wants the desires, and how we process the regrets - most probably the infinity will be processed in our brain in a <strong>readable time</strong>.</p> <hr/> <h2 id="references">References</h2> <ol> <li>Shannon, C. E. (1948). <em>A Mathematical Theory of Communication</em>.</li> <li>Lorenz, E. N. (1963). <em>Deterministic Nonperiodic Flow</em>.</li> <li>Penrose, R. (1989). <em>The Emperor’s New Mind</em>.</li> <li>Gödel, K. (1931). <em>On Formally Undecidable Propositions of Principia Mathematica</em>.</li> <li>Heisenberg, W. (1927). <em>Über den anschaulichen Inhalt der quantentheoretischen Kinematik und Mechanik</em>.</li> </ol>]]></content><author><name>Md. Rasel Mandol</name></author><category term="brain"/><category term="DNA"/><category term="RNA"/><category term="Universe"/><summary type="html"><![CDATA[Thoughts on how the human brain works]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://ritunm.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://ritunm.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://ritunm.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[<p>May 14, 2024[[read-time]] min read We’re introducing a series of updates across the Gemini family of models, including the new 1.5 Flash, our lightweight model for speed and efficiency, and Project Astra, our vision for the future of AI assistants. In December, we launched our first natively multimodal model Gemini 1.0 in three sizes: Ultra, Pro and Nano. Just a few months later we released 1.5 Pro, with enhanced performance and a breakthrough long context window of 1 million tokens.Developers and enterprise customers have been putting 1.5 Pro to use in incredible ways and finding its long context window, multimodal reasoning capabilities and impressive overall performance incredibly useful.We know from user feedback that some applications need lower latency and a lower cost to serve. This inspired us to keep innovating, so today, we’re introducing Gemini 1.5 Flash: a model that’s lighter-weight than 1.5 Pro, and designed to be fast and efficient to serve at scale.Both 1.5 Pro and 1.5 Flash are available in public preview with a 1 million token context window in Google AI Studio and Vertex AI. And now, 1.5 Pro is also available with a 2 million token context window via waitlist to developers using the API and to Google Cloud customers.We’re also introducing updates across the Gemini family of models, announcing our next generation of open models, Gemma 2, and sharing progress on the future of AI assistants, with Project Astra.Context lengths of leading foundation models compared with Gemini 1.5’s 2 million token capability1.5 Flash is the newest addition to the Gemini model family and the fastest Gemini model served in the API. It’s optimized for high-volume, high-frequency tasks at scale, is more cost-efficient to serve and features our breakthrough long context window.While it’s a lighter weight model than 1.5 Pro, it’s highly capable of multimodal reasoning across vast amounts of information and delivers impressive quality for its size.The new Gemini 1.5 Flash model is optimized for speed and efficiency, is highly capable of multimodal reasoning and features our breakthrough long context window.1.5 Flash excels at summarization, chat applications, image and video captioning, data extraction from long documents and tables, and more. This is because it’s been trained by 1.5 Pro through a process called “distillation,” where the most essential knowledge and skills from a larger model are transferred to a smaller, more efficient model.Read more about 1.5 Flash in our updated Gemini 1.5 technical report, on the Gemini technology page, and learn about 1.5 Flash’s availability and pricing.Over the last few months, we’ve significantly improved 1.5 Pro, our best model for general performance across a wide range of tasks.Beyond extending its context window to 2 million tokens, we’ve enhanced its code generation, logical reasoning and planning, multi-turn conversation, and audio and image understanding through data and algorithmic advances. We see strong improvements on public and internal benchmarks for each of these tasks.1.5 Pro can now follow increasingly complex and nuanced instructions, including ones that specify product-level behavior involving role, format and style. We’ve improved control over the model’s responses for specific use cases, like crafting the persona and response style of a chat agent or automating workflows through multiple function calls. And we’ve enabled users to steer model behavior by setting system instructions.We added audio understanding in the Gemini API and Google AI Studio, so 1.5 Pro can now reason across image and audio for videos uploaded in Google AI Studio. And we’re now integrating 1.5 Pro into Google products, including Gemini Advanced and in Workspace apps.Read more about 1.5 Pro in our updated Gemini 1.5 technical report and on the Gemini technology page.Gemini Nano is expanding beyond text-only inputs to include images as well. Starting with Pixel, applications using Gemini Nano with Multimodality will be able to understand the world the way people do — not just through text, but also through sight, sound and spoken language.Read more about Gemini 1.0 Nano on Android.Today, we’re also sharing a series of updates to Gemma, our family of open models built from the same research and technology used to create the Gemini models.We’re announcing Gemma 2, our next generation of open models for responsible AI innovation. Gemma 2 has a new architecture designed for breakthrough performance and efficiency, and will be available in new sizes.The Gemma family is also expanding with PaliGemma, our first vision-language model inspired by PaLI-3. And we’ve upgraded our Responsible Generative AI Toolkit with LLM Comparator for evaluating the quality of model responses.Read more on the Developer blog.As part of Google DeepMind’s mission to build AI responsibly to benefit humanity, we’ve always wanted to develop universal AI agents that can be helpful in everyday life. That’s why today, we’re sharing our progress in building the future of AI assistants with Project Astra (advanced seeing and talking responsive agent).To be truly useful, an agent needs to understand and respond to the complex and dynamic world just like people do — and take in and remember what it sees and hears to understand context and take action. It also needs to be proactive, teachable and personal, so users can talk to it naturally and without lag or delay.While we’ve made incredible progress developing AI systems that can understand multimodal information, getting response time down to something conversational is a difficult engineering challenge. Over the past few years, we’ve been working to improve how our models perceive, reason and converse to make the pace and quality of interaction feel more natural.Building on Gemini, we’ve developed prototype agents that can process information faster by continuously encoding video frames, combining the video and speech input into a timeline of events, and caching this information for efficient recall.By leveraging our leading speech models, we also enhanced how they sound, giving the agents a wider range of intonations. These agents can better understand the context they’re being used in, and respond quickly, in conversation.With technology like this, it’s easy to envision a future where people could have an expert AI assistant by their side, through a phone or glasses. And some of these capabilities are coming to Google products, like the Gemini app and web experience, later this year.We’ve made incredible progress so far with our family of Gemini models, and we’re always striving to advance the state-of-the-art even further. By investing in a relentless production line of innovation, we’re able to explore new ideas at the frontier, while also unlocking the possibility of new and exciting Gemini use cases.Learn more about Gemini and its capabilities. Your information will be used in accordance with Google’s privacy policy.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      Done. Just one step more.
    
      Check your inbox to confirm your subscription.
    You are already subscribed to our newsletter.
    You can also subscribe with a
    different email address
    
    .
    
  Let’s stay in touch. Get the latest news from Google in your inbox.
          Follow Us
</code></pre></div></div>]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://ritunm.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://ritunm.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://ritunm.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[<h3>External Posts on Your al-folio Blog</h3> <p>If you prefer publishing blog posts on medium.com or other external sources, starting version v0.5.0, <a href="https://github.com/alshedivat/al-folio">al-folio</a> lets you to display your external posts in the blog feed of your website! 🎉🎉</p> <p>Configuring external sources of super simple. After upgrading to v0.5.0, just add the following section to your _config.yml:</p> <pre>external_sources:<br />  - name: medium.com  # name of the source (arbitrary string)<br />    rss_url: <a href="https://medium.com/@al-folio/feed">https://medium.com/@&lt;your-medium-username&gt;/feed</a></pre> <p>The example above adds your medium.com blog post feed as an external source. But you can add arbitrary RSS feeds as sources.</p> <p>Any questions or suggestions? 👉 Start <a href="https://github.com/alshedivat/al-folio/discussions">a discussion on GitHub</a>!</p> <p><img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=b60a1d241a0a" width="1" height="1" alt=""/></p>]]></content><author><name></name></author></entry></feed>